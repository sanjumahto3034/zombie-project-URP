//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputManager/CommonInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CommonInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CommonInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CommonInput"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""c611025e-2a33-4e96-956d-2a561270eb5c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9fbe346d-25dc-41bc-8523-016d4f606fe8"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""43a71833-bdf3-4811-9019-d287b6487740"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseInput"",
                    ""type"": ""Value"",
                    ""id"": ""8b762d22-2a85-4357-8965-9a8ba783e981"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c8baeda4-69dd-4667-bdaa-821738533ce1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scope"",
                    ""type"": ""Button"",
                    ""id"": ""ec3cdf89-bc9a-472d-9b7b-76091ba61e19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""f0dd7f97-9fa8-4dec-a4c2-a3ddcbce4a68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PIck"",
                    ""type"": ""Button"",
                    ""id"": ""317c5436-c2fa-4662-aa60-d5fe59fc633f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""1fcb1bea-b983-4bbd-af61-bf2c77553659"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Gun"",
                    ""type"": ""Button"",
                    ""id"": ""9ef61102-bd64-4533-aca0-3af0483d78ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary gun"",
                    ""type"": ""Button"",
                    ""id"": ""1e6c2f2a-fed5-4da2-8905-3eef71890770"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd"",
                    ""id"": ""2ff49fa8-9bfa-4193-831d-916d9434641e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""72f6710a-8b10-4d62-9f04-99107b4fc7b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7b8dc797-d038-4324-861c-8ec576fbb1f6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9d18932f-6c05-49f6-be3b-15267a8b704b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""34aab2dd-a876-4390-aeb7-1b6cafc154fc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""88f213d5-60e7-4bda-833a-fd8b0b2100e8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""283a8378-652e-4fdc-88d3-04dd5832a0ce"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ebf6f99-a626-44a0-8f48-162c5efcc975"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse;New control scheme"",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6ae37f6-a1bd-4e31-9691-ce8104c1e3c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7a43a3d-3108-4142-9678-dbfe278d9f35"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scope"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8740a51f-21dc-4d94-b528-cb7f498769f6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7cdb462-bf6e-4201-823b-dd03e4ee46fd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""PIck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa8ebf83-4223-40e4-8e31-a81791d3cc7f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7575501-9a1f-4ad4-a980-dc6a7e790c89"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Gun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8015b80-aaa1-431b-a848-3351e4efedda"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary gun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_MouseInput = m_PlayerMovement.FindAction("MouseInput", throwIfNotFound: true);
        m_PlayerMovement_Fire = m_PlayerMovement.FindAction("Fire", throwIfNotFound: true);
        m_PlayerMovement_Scope = m_PlayerMovement.FindAction("Scope", throwIfNotFound: true);
        m_PlayerMovement_Run = m_PlayerMovement.FindAction("Run", throwIfNotFound: true);
        m_PlayerMovement_PIck = m_PlayerMovement.FindAction("PIck", throwIfNotFound: true);
        m_PlayerMovement_Drop = m_PlayerMovement.FindAction("Drop", throwIfNotFound: true);
        m_PlayerMovement_PrimaryGun = m_PlayerMovement.FindAction("Primary Gun", throwIfNotFound: true);
        m_PlayerMovement_Secondarygun = m_PlayerMovement.FindAction("Secondary gun", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_MouseInput;
    private readonly InputAction m_PlayerMovement_Fire;
    private readonly InputAction m_PlayerMovement_Scope;
    private readonly InputAction m_PlayerMovement_Run;
    private readonly InputAction m_PlayerMovement_PIck;
    private readonly InputAction m_PlayerMovement_Drop;
    private readonly InputAction m_PlayerMovement_PrimaryGun;
    private readonly InputAction m_PlayerMovement_Secondarygun;
    public struct PlayerMovementActions
    {
        private @CommonInput m_Wrapper;
        public PlayerMovementActions(@CommonInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @MouseInput => m_Wrapper.m_PlayerMovement_MouseInput;
        public InputAction @Fire => m_Wrapper.m_PlayerMovement_Fire;
        public InputAction @Scope => m_Wrapper.m_PlayerMovement_Scope;
        public InputAction @Run => m_Wrapper.m_PlayerMovement_Run;
        public InputAction @PIck => m_Wrapper.m_PlayerMovement_PIck;
        public InputAction @Drop => m_Wrapper.m_PlayerMovement_Drop;
        public InputAction @PrimaryGun => m_Wrapper.m_PlayerMovement_PrimaryGun;
        public InputAction @Secondarygun => m_Wrapper.m_PlayerMovement_Secondarygun;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @MouseInput.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMouseInput;
                @MouseInput.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMouseInput;
                @MouseInput.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMouseInput;
                @Fire.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnFire;
                @Scope.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnScope;
                @Scope.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnScope;
                @Scope.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnScope;
                @Run.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRun;
                @PIck.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPIck;
                @PIck.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPIck;
                @PIck.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPIck;
                @Drop.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnDrop;
                @PrimaryGun.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPrimaryGun;
                @PrimaryGun.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPrimaryGun;
                @PrimaryGun.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPrimaryGun;
                @Secondarygun.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSecondarygun;
                @Secondarygun.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSecondarygun;
                @Secondarygun.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSecondarygun;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseInput.started += instance.OnMouseInput;
                @MouseInput.performed += instance.OnMouseInput;
                @MouseInput.canceled += instance.OnMouseInput;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Scope.started += instance.OnScope;
                @Scope.performed += instance.OnScope;
                @Scope.canceled += instance.OnScope;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @PIck.started += instance.OnPIck;
                @PIck.performed += instance.OnPIck;
                @PIck.canceled += instance.OnPIck;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @PrimaryGun.started += instance.OnPrimaryGun;
                @PrimaryGun.performed += instance.OnPrimaryGun;
                @PrimaryGun.canceled += instance.OnPrimaryGun;
                @Secondarygun.started += instance.OnSecondarygun;
                @Secondarygun.performed += instance.OnSecondarygun;
                @Secondarygun.canceled += instance.OnSecondarygun;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseInput(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnScope(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnPIck(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnPrimaryGun(InputAction.CallbackContext context);
        void OnSecondarygun(InputAction.CallbackContext context);
    }
}
